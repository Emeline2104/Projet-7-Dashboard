"""
Script 1_üìä_Informations_client.py

Ce script Streamlit permet d'afficher les informations sur un client √† partir d'un ID client sp√©cifi√©.

Le script utilise des fonctions pour organiser l'affichage des informations, notamment sur les informations
personnelles, les donn√©es du bureau, et les demandes pr√©c√©dentes. Des listes d√©roulantes permettent de choisir
les informations √† afficher, et des expander sont utilis√©s pour afficher des informations suppl√©mentaires.

Le script utilise un environnement local par d√©faut, mais la variable `api_url` peut √™tre modifi√©e pour l'environnement
Heroku.

Remarques:
- Assurez-vous d'avoir les d√©pendances requises install√©es en ex√©cutant : pip install requirements.txt.
- Pour personnaliser l'environnement, modifiez l'URL de l'API en d√©commentant l'environnement souhait√©.
"""

import streamlit as st
import requests
from Data.config import (
    correspondance_dict_application_info,
    correspondance_dict_bureau_info,
    correspondance_dict_previous_application_info
)


# Check que la cl√© 'client_id' est dans la session state
if 'client_id' not in st.session_state:
    st.session_state.client_id = None
    st.write('Merci de vouloir indiquer un ID client dans "Recherche client".')

# R√©cup√©ration de l'ID client de la session state
client_id = st.session_state.client_id
client_info = st.session_state.client_info

def afficher_informations_client(client_id):
    """
    Fonction pour afficher les informations sur le client.

    Parameters:
    - client_id (str): L'ID du client.

    """
    st.title("Page d'informations sur le client")
    st.write(f"**ID du client :** {client_id}")

    try:
        afficher_informations_application(client_info.get('informations_application', [])[0])
        afficher_informations_bureau(client_info.get('informations_bureau', [])[0])
        afficher_informations_previous_application(client_info.get('informations_previous_application', [])[0])

    except Exception as e:
        st.error(f"Une erreur s'est produite : {e}")

def afficher_informations_generales(titre, info, correspondance_dict):
    """
    Fonction g√©n√©rique pour afficher les informations.

    Parameters:
    - titre (str): Le titre de la section.
    - info (dict): Les informations sp√©cifiques √† afficher.
    - correspondance_dict (dict): Le dictionnaire de correspondance des informations.

    """
    st.subheader(titre)

    titres_informations = [correspondance_dict[key]['Titre'] for key in correspondance_dict.keys()]
    choix_information = st.selectbox("Choisir une information:", titres_informations)

    for key, value in correspondance_dict.items():
        if value['Titre'] == choix_information:
            cle_correspondante = key
            break

    st.write(f"Valeur : {info[cle_correspondante]}")
    st.write(f"Unit√© : {value.get('Unit√©', 'Aucune unit√© disponible')}")
    st.write(f"Description : {value.get('Description', 'Aucune description disponible')}")

def afficher_informations_application(application_info):
    """
    Fonction pour afficher les informations sur l'application.

    Parameters:
    - application_info (dict): Les informations sur l'application du client.

    """
    afficher_informations_generales("Informations personnelles:", application_info, correspondance_dict_application_info)

def afficher_informations_bureau(bureau_info):
    """
    Fonction pour afficher les informations sur le bureau.

    Parameters:
    - bureau_info (dict): Les informations sur le bureau du client.

    """
    afficher_informations_generales("Informations concernant les donn√©es des institutions financi√®res:", bureau_info, correspondance_dict_bureau_info)

def afficher_informations_previous_application(previous_application_info):
    """
    Fonction pour afficher les informations sur les demandes pr√©c√©dentes.

    Parameters:
    - previous_application_info (dict): Les informations sur les demandes pr√©c√©dentes du client.

    """
    afficher_informations_generales("Informations sur les anciennes demandes:", previous_application_info, correspondance_dict_previous_application_info)

def afficher_informations_pos_cash_balance(pos_cash_balance_info):
    """
    Fonction pour afficher les informations sur le POS_CASH_balance.

    Parameters:
    - pos_cash_balance_info (list): Les informations sur le POS_CASH_balance du client.

    """
    st.subheader("POS_CASH_balance_info:")
    for entry in pos_cash_balance_info:
        st.write(entry)

def afficher_informations_credit_card_balance(credit_card_balance_info):
    """
    Fonction pour afficher les informations sur les paiements par carte de cr√©dit.

    Parameters:
    - credit_card_balance_info (dict): Les informations sur les paiements par carte de cr√©dit du client.

    """
    st.subheader("Credit Card Balance Info:")
    st.write(credit_card_balance_info)

def afficher_informations_installments_payments(installments_payments_info):
    """
    Fonction pour afficher les informations sur les paiements d'acomptes.

    Parameters:
    - installments_payments_info (list): Les informations sur les paiements d'acomptes du client.

    """
    st.subheader("Installments Payments Info:")
    for entry in installments_payments_info:
        st.write(entry)

def afficher_informations_supplementaires(client_info):
    """
    Fonction pour afficher des informations suppl√©mentaires dans une liste d√©roulante.

    Parameters:
    - client_info (dict): Les informations suppl√©mentaires sur le client.

    """
    st.subheader("Informations suppl√©mentaires:")
    with st.expander("Plus d'informations"):
        if 'POS_CASH_balance_info' in client_info:
            afficher_informations_pos_cash_balance(client_info['POS_CASH_balance_info'])
        if 'credit_card_balance_info' in client_info:
            afficher_informations_credit_card_balance(client_info['credit_card_balance_info'])
        if 'installments_payments_info' in client_info:
            afficher_informations_installments_payments(client_info['installments_payments_info'])

# Si l'ID client est d√©fini, affiche les informations sur le client
if client_id:
    afficher_informations_client(client_id)
else:
    st.write('Merci de vouloir indiquer un ID client dans "Recherche client".')
