"""
Script 2_üöÄ_Informations_cr√©dit.py

Ce script Streamlit permet d'afficher les informations sur un client et d'effectuer des pr√©dictions de cr√©dit.

Pr√©requis :
- Streamlit doit √™tre install√© : pip install streamlit

Le script utilise des fonctions pour organiser l'affichage des informations, notamment sur les pr√©dictions de cr√©dit
et les informations sur le client. Des pr√©dictions sont effectu√©es en appelant une API, et les r√©sultats sont affich√©s.

Le script utilise un environnement local par d√©faut, mais la variable `api_url` peut √™tre modifi√©e pour l'environnement
Heroku.

"""

import streamlit as st
import requests
import math

# Environnement local
api_url = "http://127.0.0.1:5001"
# Environnement Heroku
# api_url = "https://projet-7-38cdf763d118.herokuapp.com/"

# Check que la cl√© 'client_id' est dans la session state
if 'client_id' not in st.session_state:
    st.session_state.client_id = None

# R√©cup√®re l'ID client de la session state
client_id = st.session_state.client_id
client_info = st.session_state.client_info

st.title("Page d'informations cr√©dit")

def make_predictions(client_id):
    """
    Fonction pour effectuer des pr√©dictions de cr√©dit.

    Parameters:
    - client_id (str): L'ID du client.

    """
    try:
        with st.spinner('Patientez un instant pour la pr√©diction ...'):
            response = requests.get(f"{api_url}/predict/{client_id}")

        if response.status_code == 200:
            predictions = response.json()
            st.session_state.target = predictions

            st.write("Pr√©dictions pour le client :")
            if predictions['predictions'] == 1:
                st.warning("Le client n'a pas obtenu son pr√™t.")
            else:
                st.success("Le client a obtenu son pr√™t.")

        else:
            st.error("Erreur lors de l'effectuation des pr√©dictions.")
    except Exception as e:
        st.error(f"Une erreur s'est produite lors des pr√©dictions : {e}")

if client_id:
    make_predictions(client_id)
else:
    st.write('Merci de vouloir indiquer un ID client dans "Recherche client".')

def afficher_informations_client(client_id):
    """
    Fonction pour afficher les informations sur le client.

    Parameters:
    - client_id (str): L'ID du client.

    """
    st.subheader("Informations cr√©dit:")

    try:
        response = requests.get(f"{api_url}/informations_client_brut/{client_id}")
        client_info = response.json()

        st.session_state.client_info = client_info

        if 'informations_application' in client_info:
            afficher_informations_application(client_info['informations_application'][0])

    except Exception as e:
        st.error(f"Une erreur s'est produite : {e}")

def afficher_informations_application(application_info):
    """
    Fonction pour afficher les informations sur l'application de cr√©dit.

    Parameters:
    - application_info (dict): Les informations sur l'application de cr√©dit du client.

    """
    st.write(f"**Type de pr√™t:** {application_info['NAME_CONTRACT_TYPE']}")
    st.write(f"**Genre du co-demandeur:** {application_info['NAME_CONTRACT_TYPE']}")
    st.write(f"**√Çge du co-demandeur:** {application_info['DAYS_BIRTH']}")
    st.write(f"**Revenu annuel du co-demandeur (‚Ç¨):** {application_info['AMT_INCOME_TOTAL']}")

# Si l'ID client est d√©fini, affiche les informations sur le client
if client_id:
    afficher_informations_client(client_id)
else:
    st.write('Merci de vouloir indiquer un ID client dans "Recherche client".')
