"""
Script 2_üöÄ_Informations_cr√©dit.py

Ce script Streamlit permet d'afficher les informations sur un client et d'effectuer des pr√©dictions de cr√©dit.

Pr√©requis :
- Streamlit doit √™tre install√© : pip install streamlit

Le script utilise des fonctions pour organiser l'affichage des informations, notamment sur les pr√©dictions de cr√©dit
et les informations sur le client. Des pr√©dictions sont effectu√©es en appelant une API, et les r√©sultats sont affich√©s.

Le script utilise un environnement local par d√©faut, mais la variable `api_url` peut √™tre modifi√©e pour l'environnement
Heroku.

"""

import streamlit as st
import requests
import pandas as pd
import plotly.graph_objects as go

# Environnement local
api_url = "http://127.0.0.1:5001"
# Environnement Heroku
# api_url = "https://projet-7-38cdf763d118.herokuapp.com/"

# Check que la cl√© 'client_id' est dans la session state
if 'client_id' not in st.session_state:
    st.session_state.client_id = None
    st.session_state.client_info = None
    st.session_state.client_features = None

# R√©cup√®re l'ID client de la session state
client_id = st.session_state.client_id
client_info = st.session_state.client_info
client_features = st.session_state.client_features

st.title("Page d'informations cr√©dit")

def load_classification_threshold():
    # Chargement du seuil de classification optimal √† partir du fichier texte
    response = requests.get(f"{api_url}/get_info_seuil")
    
    # V√©rifie si la requ√™te a r√©ussi (statut 200 OK)
    if response.status_code == 200:
        # Extrais le contenu de la r√©ponse et le convertis en float
        threshold = float(response.text)
        return threshold
    else:
        # G√©re le cas o√π la requ√™te a √©chou√©
        print(f"Erreur lors de la requ√™te : {response.status_code}")
        return None 

def make_predictions(client_features):
    """
    Fonction pour effectuer des pr√©dictions de cr√©dit.

    Parameters:
    - client_id (str): L'ID du client.
    - seuil_classification (float): Le seuil √† partir duquel la classification est 0 ou 1.

    """
    seuil_classification=load_classification_threshold()
    try:
        with st.spinner('Patientez un instant pour la pr√©diction ...'):
            response = requests.post(f"{api_url}/predict", json=client_features)

        if response.status_code == 200:
            predictions = response.json()
            st.session_state.target = predictions

            st.subheader("Pr√©dictions pour le client:")
            
            # Assurez-vous que la structure de la r√©ponse est correcte
            if 'prediction' in predictions and 'probability' in predictions:
                prediction_value = predictions['prediction']
                probability = predictions['probability']
                probability = round(probability, 4)

                if prediction_value == 1:
                    st.warning("Le client n'a pas obtenu son pr√™t.")
                else:
                    st.success("Le client a obtenu son pr√™t.")

                # Affichez √©galement les probabilit√©s de pr√©diction
                st.write(f"**Probabilit√© de d√©faut du pr√™t** : {probability:.2f}")
                st.write(f"**Seuil maximal** : {seuil_classification:.2f}")
                st.write(f"*Probablit√© minimale au-del√† duquel la demande de pr√™t est refus√©e.*")

                # Afficher la jauge de probabilit√©
                couleur_jauge = "#800000" if probability > seuil_classification else "#006400"

                # Configuration de la jauge Plotly
                fig = go.Figure(go.Indicator(
                    mode="gauge+number",
                    value=probability,
                    domain={'x': [0, 1], 'y': [0, 1]},
                    title={'text': "Probabilit√© de d√©faut du pr√™t"},
                    gauge={
                        'axis': {'range': [None, 1], 'tickwidth': 1, 'tickcolor': "darkblue"},
                        'bar': {'color': couleur_jauge},
                        'bgcolor': "white",
                        'borderwidth': 2,
                        'bordercolor': "gray",
                        'threshold': {
                            'line': {'color': "black", 'width': 7},
                            'thickness': 1,
                            'value': seuil_classification}
                    }
                ))

                # Afficher la jauge Plotly
                st.plotly_chart(fig)

            else:
                st.error("Structure de r√©ponse invalide.")
        else:
            st.error("Erreur lors de l'effectuation des pr√©dictions.")
    except Exception as e:
        st.error(f"Une erreur s'est produite lors des pr√©dictions : {e}")


def afficher_informations_client(client_info):
    """
    Fonction pour afficher les informations sur le client.

    Parameters:
    - client_id (str): L'ID du client.

    """
    st.subheader("Informations cr√©dit:")

    try:
        if 'informations_application' in client_info:
            afficher_informations_application(client_info['informations_application'][0])

    except Exception as e:
        st.error(f"Une erreur s'est produite : {e}")

def afficher_informations_application(application_info):
    """
    Fonction pour afficher les informations sur l'application de cr√©dit.

    Parameters:
    - application_info (dict): Les informations sur l'application de cr√©dit du client.

    """
    st.write(f"**Type de pr√™t:** {application_info['NAME_CONTRACT_TYPE']}")
    st.write(f"**Revenu annuel du co-demandeur (‚Ç¨):** {application_info['AMT_INCOME_TOTAL']}")

def visualize_top_features(client_features):
    st.subheader("Explication des caract√©ristiques relatives au choix de l'octroi du pr√™t:")

    # Obtention des features importance locale √† partir de l'API 
    with st.spinner('Patientez un instant pour l\'affichage des caract√©ristiques de la pr√©diction ...'):
        response = requests.post(f"{api_url}/get_importance-caracteristiques", json=client_features)

    if response.status_code == 200:
        # Extraire le contenu JSON de la r√©ponse
        importance_dict = response.json()

        # Conversion du dictionnaire en DataFrame
        importance_df = pd.DataFrame(list(importance_dict.items()), columns=['Feature', 'Importance'])

        # Calcule l'amplitude des importances (valeur absolue)
        importance_df['Amplitude Importance'] = importance_df['Importance'].abs()

        # Trie le DataFrame par l'amplitude de l'importance en ordre d√©croissant et s√©lectionnez les 20 meilleures caract√©ristiques
        top_features = importance_df.sort_values(by='Amplitude Importance', ascending=False).head(20)
        top_features = top_features[['Importance', 'Feature']]
        # Cr√©er le graphique √† barres avec Plotly
        fig = go.Figure()

        # Ajouter les barres pour les valeurs positives avec la couleur rouge
        fig.add_trace(go.Bar(
            x=top_features['Feature'],
            y=top_features['Importance'],
            marker_color=['#800000' if val > 0 else '#006400' for val in top_features['Importance']],  # Rouge pour les valeurs positives, vert pour les valeurs n√©gatives
        ))

        # Mise en forme du layout
        fig.update_layout(
            title='Top 20 des caract√©ristiques les plus importantes',
            yaxis_title='Importance',
            xaxis_title='Caract√©ristiques',
            barmode='relative',
        )

        # Ajuster la taille du graphique
        fig.update_layout(height=800)

        # Streamlit app
        st.plotly_chart(fig)

        st.markdown(
            """
            Ce graphique explique la pr√©diction de d√©faut de cr√©dit concernant le client sp√©cifi√©. 
            Les caract√©ristiques sont ordonn√©es en fonction de leur contribution √† la pr√©diction, les caract√©ristiques en haut de la liste ayant l'impact le plus significatif.
            - Caract√©ristiques Positives : Les caract√©ristiques avec des barres orient√©es vers le haut ont une influence positive sur la pr√©diction. Une valeur plus √©lev√©e de ces caract√©ristiques accro√Æt la probabilit√© de d√©faut de cr√©dit, ce qui pourrait conduire au refus du cr√©dit en raison d'un risque plus √©lev√©.
            - Caract√©ristiques N√©gatives : Les caract√©ristiques avec des barres orient√©es vers le bas ont une influence n√©gative. Une valeur plus √©lev√©e de ces caract√©ristiques diminue la probabilit√© de d√©faut de cr√©dit, indiquant un risque moindre et favorisant l'approbation du cr√©dit.)
            """
        )
    else:
        st.error(f"Erreur lors de la r√©cup√©ration des caract√©ristiques d'importance : {response.status_code}")

# Si l'ID client est d√©fini, affiche les informations sur le client
if client_id:
    make_predictions(client_features)
    afficher_informations_client(client_info)
    visualize_top_features(client_features)
else:
    st.write('Merci de vouloir indiquer un ID client dans "Recherche client".')
