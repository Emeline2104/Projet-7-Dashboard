"""
Script 2_üöÄ_Informations_cr√©dit.py

Ce script Streamlit permet d'afficher les informations sur un client et d'effectuer des pr√©dictions de cr√©dit.

Pr√©requis :
- Streamlit doit √™tre install√© : pip install streamlit

Le script utilise des fonctions pour organiser l'affichage des informations, notamment sur les pr√©dictions de cr√©dit
et les informations sur le client. Des pr√©dictions sont effectu√©es en appelant une API, et les r√©sultats sont affich√©s.

Le script utilise un environnement local par d√©faut, mais la variable `api_url` peut √™tre modifi√©e pour l'environnement
Heroku.

"""

import streamlit as st
import requests
import pandas as pd
import plotly.graph_objects as go

# Environnement local
# api_url = "http://127.0.0.1:5001"
# Environnement Heroku
api_url = "https://projet-7-38cdf763d118.herokuapp.com/"

# Check que la cl√© 'client_id' est dans la session state
if 'client_id' not in st.session_state:
    st.session_state.client_id = None
    st.session_state.client_info = None
if 'client_features'not in st.session_state:
    st.session_state.client_features = None

# R√©cup√®re l'ID client de la session state
client_id = st.session_state.client_id
client_info = st.session_state.client_info
client_features = st.session_state.client_features

st.title("Page d'informations cr√©dit")

@st.cache_data
def load_classification_threshold():
    """
    Charge le seuil de classification optimal √† partir de l'API.

    Returns:
    - float: Le seuil de classification optimal.
             Retourne None en cas d'erreur lors de la requ√™te.
    """
    # Chargement du seuil de classification optimal √† partir du fichier texte
    response = requests.get(f"{api_url}/get_info_seuil")
    
    # V√©rifie si la requ√™te a r√©ussi (statut 200 OK)
    if response.status_code == 200:
        # Extrais le contenu de la r√©ponse et le convertis en float
        threshold = float(response.text)
        return threshold
    else:
        # G√©re le cas o√π la requ√™te a √©chou√©
        print(f"Erreur lors de la requ√™te : {response.status_code}")
        return None

def make_predictions(client_features):
    """
    Fonction pour effectuer des pr√©dictions de cr√©dit.

    Parameters:
    - client_features (df): features du client.
    """
    # chargmenent du seuil de probabilit√© pour la classificatoin
    seuil_classification=load_classification_threshold()
    try:
        with st.spinner('Patientez un instant pour la pr√©diction ...'):
            response = requests.post(f"{api_url}/predict", json=client_features)

        if response.status_code == 200:
            predictions = response.json()
            st.session_state.target = predictions
            st.subheader("Pr√©dictions pour le client:")
            
            # Verification de la structure de la r√©ponse
            if 'prediction' in predictions and 'probability' in predictions:
                prediction_value = predictions['prediction']
                probability = predictions['probability']
                probability = round(probability, 4)

                if prediction_value == 1:
                    st.warning("Le client n'a pas obtenu son pr√™t.")
                else:
                    st.success("Le client a obtenu son pr√™t.")

                # Affichage des probabilit√©s de pr√©diction
                st.write(f"**Probabilit√© de d√©faut du pr√™t** : {probability:.2f}")
                st.write(f"**Seuil maximal** : {seuil_classification:.2f}")
                st.write("*Probablit√© minimale au-del√† duquel la demande de pr√™t est refus√©e.*")

                # Affichage de la jauge de probabilit√©
                couleur_jauge = "#800000" if probability > seuil_classification else "#006400"
                fig = go.Figure(go.Indicator(
                    mode="gauge+number",
                    value=probability,
                    domain={'x': [0, 1], 'y': [0, 1]},
                    title={'text': "Probabilit√© de d√©faut du pr√™t"},
                    gauge={
                        'axis': {'range': [None, 1], 'tickwidth': 1, 'tickcolor': "darkblue"},
                        'bar': {'color': couleur_jauge},
                        'bgcolor': "white",
                        'borderwidth': 2,
                        'bordercolor': "gray",
                        'threshold': {
                            'line': {'color': "black", 'width': 7},
                            'thickness': 1,
                            'value': seuil_classification}
                    }
                ))
                st.plotly_chart(fig)

            else:
                st.error("Structure de r√©ponse invalide.")
        else:
            st.error("Erreur lors de l'effectuation des pr√©dictions.")
    except Exception as e:
        st.error(f"Une erreur s'est produite lors des pr√©dictions : {e}")


def afficher_informations_client(client_info):
    """
    Fonction pour afficher les informations sur le client.

    Parameters:
    - client_info (dict): info du client.
    """
    st.subheader("Informations cr√©dit:")
    try:
        if 'informations_application' in client_info:
            st.write(f"**Type de pr√™t:** {client_info['informations_application'][0]['NAME_CONTRACT_TYPE']}")
            st.write(f"**Montant du cr√©dit demand√© (‚Ç¨):** {client_info['informations_application'][0]['AMT_CREDIT']}")
            st.write(f"**Montant des annuit√©s du cr√©dit (‚Ç¨):** {client_info['informations_application'][0]['AMT_ANNUITY']}")
            st.write(f"**Montant des biens pour lequel le cr√©dit est octroy√© (‚Ç¨):** {client_info['informations_application'][0]['AMT_GOODS_PRICE']}")
    except Exception as e:
        st.error(f"Une erreur s'est produite : {e}")
        
def visualize_top_features(client_features):
    """
    Visualise les caract√©ristiques les plus importantes pour la d√©cision d'octroi de cr√©dit.

    Parameters:
    - client_features (dict): Dictionnaire des caract√©ristiques du client.

    La fonction utilise une requ√™te √† une API pour obtenir les caract√©ristiques d'importance pour la pr√©diction
    d'octroi de cr√©dit pour le client sp√©cifi√©. Elle g√©n√®re ensuite un graphique √† barres interactif (utilisant
    Plotly) pour repr√©senter visuellement les 20 caract√©ristiques les plus importantes.

    Le graphique pr√©sente les caract√©ristiques dans l'ordre d√©croissant de leur amplitude d'importance.
    Chaque barre du graphique repr√©sente une caract√©ristique particuli√®re, et sa hauteur indique l'importance de
    cette caract√©ristique pour la d√©cision du mod√®le. La couleur de la barre (rouge ou vert) indique la direction
    de l'impact de la caract√©ristique sur la probabilit√© d'octroi de cr√©dit.

    """
    st.subheader("Explication des caract√©ristiques relatives au choix de l'octroi du pr√™t:")

    # Obtention des features importance locale √† partir de l'API 
    with st.spinner('Patientez un instant pour l\'affichage des caract√©ristiques de la pr√©diction ...'):
        response = requests.post(f"{api_url}/get_importance-caracteristiques", json=client_features)
        
    if response.status_code == 200:
        # Extrais le contenu JSON de la r√©ponse
        importance_dict = response.json()

        # Conversion du dictionnaire en DataFrame
        importance_df = pd.DataFrame(list(importance_dict.items()), columns=['Feature', 'Importance'])

        # Calcule l'amplitude des importances (valeur absolue)
        importance_df['Amplitude Importance'] = importance_df['Importance'].abs()

        # Trie le DataFrame par l'amplitude de l'importance en ordre d√©croissant et s√©lectionnez les 20 meilleures caract√©ristiques
        top_features = importance_df.sort_values(by='Amplitude Importance', ascending=False).head(20)
        top_features = top_features[['Importance', 'Feature']]
        # Cr√©er le graphique √† barres avec Plotly
        fig = go.Figure()

        # Ajoute les barres pour les valeurs positives avec la couleur rouge
        fig.add_trace(go.Bar(
            x=top_features['Feature'],
            y=top_features['Importance'],
            marker_color=['#800000' if val > 0 else '#006400' for val in top_features['Importance']],  
            # Rouge pour les valeurs positives, vert pour les valeurs n√©gatives
        ))

        # Mise en forme du layout
        fig.update_layout(
            title='Top 20 des caract√©ristiques les plus importantes',
            yaxis_title='Importance',
            xaxis_title='Caract√©ristiques',
            barmode='relative',
        )

        # Ajuste la taille du graphique
        fig.update_layout(height=800)

        # Streamlit app
        st.plotly_chart(fig)

        st.markdown(
            """
                Ce graphique explique la pr√©diction de d√©faut de cr√©dit concernant le client sp√©cifi√©. 
                Les caract√©ristiques qui ont le plus influenc√© la d√©cision du mod√®le concernant la d√©cision d'octroi du cr√©dit. 
                - **√âchelle de l'importance** : L'axe vertical repr√©sente l'importance de chaque caract√©ristique. Une barre plus haute signifie que cette caract√©ristique a une influence plus forte sur la d√©cision du mod√®le.
                - **Caract√©ristiques individuelles** : Chaque barre sur le graphique correspond √† une caract√©ristique particuli√®re du client, comme le revenu, l'√¢ge, ou le montant du pr√™t.
                - **Direction de l'impact** :  La direction de la barre indique si la caract√©ristique a une influence positive ou n√©gative sur la probabilit√© de refus de cr√©dit. 
                Une barre pointant vers le haut signifie une influence positive (rouge), et une barre pointant vers le bas signifie une influence n√©gative (vert).
                - **Interpr√©tation des barre** : En analysant ces barres, vous pouvez d√©terminer quelles caract√©ristiques ont le plus contribu√© √† la probabilit√© de refus de cr√©dit. 
                *Par exemple, si la barre la plus haute repr√©sente le revenu, cela signifie que le revenu a eu la plus grande influence sur la probabilit√© de refus.*
                
                En r√©sum√©, ce graphique aide √† comprendre pourquoi le mod√®le a pris la d√©cision qu'il a prise pour ce client sp√©cifique. 
                Plus la barre est haute, plus la caract√©ristique est importante, et la direction de la barre indique si cette caract√©ristique a eu un impact positif ou n√©gatif sur la probabilit√© de refus de cr√©dit.
            """)
    else:
        st.error(f"Erreur lors de la r√©cup√©ration des caract√©ristiques d'importance : {response.status_code}")

# Si l'ID client est d√©fini, affiche les informations sur le client
if client_id:
    make_predictions(client_features)
    afficher_informations_client(client_info)
    visualize_top_features(client_features)
else:
    st.write('Merci de vouloir indiquer un ID client dans "Recherche client".')
